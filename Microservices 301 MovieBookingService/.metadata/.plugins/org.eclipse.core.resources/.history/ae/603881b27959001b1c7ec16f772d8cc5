package com.mindtree.userService.services.serviceImpl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mindtree.userService.configs.ExternalAdminService;
import com.mindtree.userService.dtos.PreferenceRequestDto;
import com.mindtree.userService.dtos.ReviewRequestDto;
import com.mindtree.userService.dtos.UserRequestDto;
import com.mindtree.userService.dtos.UserResponseDto;
import com.mindtree.userService.exceptions.GenreIDInvalid;
import com.mindtree.userService.exceptions.ServiceException;
import com.mindtree.userService.exceptions.UserIDInvalid;
import com.mindtree.userService.models.Preference;
import com.mindtree.userService.models.User;
import com.mindtree.userService.repositories.PreferenceRepository;
import com.mindtree.userService.repositories.UserRepository;
import com.mindtree.userService.services.UserService;
@Service
public class UserServiceImpl implements UserService {

//	@Autowired
	ModelMapper modelMapper=new ModelMapper();
	
	@Autowired 
	UserRepository userRepository;
	
	@Autowired
	PreferenceRepository preferenceRepository;
	
	@Autowired
	ExternalAdminService externalAdminService;
	
	@Override
	public UserResponseDto addUserToDB(UserRequestDto userRequestDto) {
		return convert(userRepository.save(convert(userRequestDto, new User())), new UserResponseDto());
	}

	public  <U, T> U convert (T obj1,U obj2) {
		return  (U) modelMapper.map(obj1,obj2.getClass());
	}	

	

	
	@Override
	public PreferenceRequestDto addPreferenceToDB(PreferenceRequestDto preferenceRequestDto) throws ServiceException {
		
		if(!externalAdminService.validateGenreInDB(preferenceRequestDto.getGenreId()).getBody().getBody())
		{
			throw new GenreIDInvalid("Please Check the Genre Id Entered");
		}
		
		return convert(preferenceRepository.save(convert(preferenceRequestDto, new Preference())), preferenceRequestDto);
	}

	@Override
	public ReviewRequestDto addReviewToDB(ReviewRequestDto reviewRequestDto, int userId) {
		return null;
	}

	@Override
	public String assignPreferenceToUser(int userId, int preferenceId) {
		
		return null;
	}

	@Override
	public UserRequestDto updateUserDetailsToDB(UserRequestDto userRequestDto, int userId) throws ServiceException {
		
		User user=userRepository.findById(userId).
				orElseThrow(()-> new UserIDInvalid("user id invalid"));
		if(!user.getEmail().equals(userRequestDto.getEmail()))
		{
		user.setEmail(userRequestDto.getEmail());
		}
		if(user.getUserName().equals(userRequestDto.get))
		user.setUserName(userRequestDto.getUserName());
		user.setUserType(userRequestDto.getUserType());
		
		return null;
	}

	@Override
	public List<UserRequestDto> getAllUsersFromDB() {
		return userRepository.findAll().stream().map(u->convert(u, new UserRequestDto())).collect(Collectors.toList());
	}

	


}
