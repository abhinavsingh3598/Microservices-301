package com.mindtree.searchService.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.mindtree.searchService.services.SearchService;
import com.mindtree.searchService.utilities.ApiResponse;

@RestController
public class SearchController {
	
	@Autowired
	SearchService searchService;

	@RequestMapping(method = RequestMethod.GET, consumes = MediaType.APPLICATION_JSON_VALUE ,path = "/movie/{cityName}")
	public ResponseEntity<ApiResponse> getMoviesByCityName(@PathVariable String cityName )
	{
		
		ApiResponse apiResponse = new ApiResponse();
		apiResponse.setBody(searchService.getMovieListByCity(cityName));
		apiResponse.setMessage("Movies Searched Sucessfully !!");
		apiResponse.setError(false);
		apiResponse.setStatus(HttpStatus.FOUND);
		return ResponseEntity.status(HttpStatus.FOUND).body(apiResponse);
	}
	
	@RequestMapping(method = RequestMethod.GET, consumes = MediaType.APPLICATION_JSON_VALUE ,path = "/movie/{language}")
	public ResponseEntity<ApiResponse> getMoviesByLanguage(@PathVariable String language )
	{
		
		ApiResponse apiResponse = new ApiResponse();
		apiResponse.setBody(searchService.getMovieListByLanguage(language));
		apiResponse.setMessage("Movies Searched Sucessfully !!");
		apiResponse.setError(false);
		apiResponse.setStatus(HttpStatus.FOUND);
		return ResponseEntity.status(HttpStatus.FOUND).body(apiResponse);
	}
	
	@RequestMapping(method = RequestMethod.GET, consumes = MediaType.APPLICATION_JSON_VALUE ,path = "/movie/{genre}")
	public ResponseEntity<ApiResponse> getMoviesByGenre(@PathVariable String genreType )
	{
		
		ApiResponse apiResponse = new ApiResponse();
		apiResponse.setBody(searchService.getMovieListByGenre(genreType));
		apiResponse.setMessage("Movies Searched Sucessfully !!");
		apiResponse.setError(false);
		apiResponse.setStatus(HttpStatus.FOUND);
		return ResponseEntity.status(HttpStatus.FOUND).body(apiResponse);
	}
	
	@RequestMapping(method = RequestMethod.GET, consumes = MediaType.APPLICATION_JSON_VALUE ,path = "/movie/{preferenceId}")
	public ResponseEntity<ApiResponse> getMoviesByPreference(@PathVariable int preferenceId )
	{
		
		ApiResponse apiResponse = new ApiResponse();
		apiResponse.setBody(searchService.getMovieListByPreference(preferenceId));
		apiResponse.setMessage("Movies Searched Sucessfully !!");
		apiResponse.setError(false);
		apiResponse.setStatus(HttpStatus.FOUND);
		return ResponseEntity.status(HttpStatus.FOUND).body(apiResponse);
	}
	
	@RequestMapping(method = RequestMethod.GET, consumes = MediaType.APPLICATION_JSON_VALUE ,path = "/movie/{userId}")
	public ResponseEntity<ApiResponse> getMoviesByGenre(@PathVariable int userId )
	{
		
		ApiResponse apiResponse = new ApiResponse();
		apiResponse.setBody(searchService.getMovieListByUser(userId));
		apiResponse.setMessage("Movies Searched Sucessfully !!");
		apiResponse.setError(false);
		apiResponse.setStatus(HttpStatus.FOUND);
		return ResponseEntity.status(HttpStatus.FOUND).body(apiResponse);
	}
	
	@RequestMapping(method = RequestMethod.GET, consumes = MediaType.APPLICATION_JSON_VALUE ,path = "/movieNameValidate")
	public ResponseEntity<ApiResponse> validateMovieNameExist(@PathVariable String movieName )
	{
		
		ApiResponse apiResponse = new ApiResponse();
		apiResponse.setBody(searchService.validateMovieFromDB(movieName));
		apiResponse.setMessage("Movie Validated!!");
		apiResponse.setError(false);
		apiResponse.setStatus(HttpStatus.OK);
		return ResponseEntity.status(HttpStatus.OK).body(apiResponse);
	}
	
	@RequestMapping(method = RequestMethod.GET, consumes = MediaType.APPLICATION_JSON_VALUE ,path = "/theaterNameValidate")
	public ResponseEntity<ApiResponse> validateTheaterNameExist(@PathVariable String theaterName )
	{
		
		ApiResponse apiResponse = new ApiResponse();
		apiResponse.setBody(searchService.validateTheaterFromDB(theaterName));
		apiResponse.setMessage("Theater Validated!!");
		apiResponse.setError(false);
		apiResponse.setStatus(HttpStatus.OK);
		return ResponseEntity.status(HttpStatus.OK).body(apiResponse);
	}
	
	@RequestMapping(method = RequestMethod.GET, consumes = MediaType.APPLICATION_JSON_VALUE ,path = "/theaterNameValidate")
	public ResponseEntity<ApiResponse> validateUserIdExist(@PathVariable int userId )
	{
		
		ApiResponse apiResponse = new ApiResponse();
		apiResponse.setBody(searchService.validateUserFromDB(userId));
		apiResponse.setMessage("User Validated!!");
		apiResponse.setError(false);
		apiResponse.setStatus(HttpStatus.OK);
		return ResponseEntity.status(HttpStatus.OK).body(apiResponse);
	}

	@RequestMapping(method = RequestMethod.GET, consumes = MediaType.APPLICATION_JSON_VALUE ,path = "/theaterNameValidate")
	public ResponseEntity<ApiResponse> validateShowScreenDetailsIdExist(@PathVariable int showScreenDetailsId )
	{
		
		ApiResponse apiResponse = new ApiResponse();
		apiResponse.setBody(searchService.validateShowScreenDetailsFromDB(showScreenDetailsId));
		apiResponse.setMessage("ShowScreenDetails Id Validated!!");
		apiResponse.setError(false);
		apiResponse.setStatus(HttpStatus.OK);
		return ResponseEntity.status(HttpStatus.OK).body(apiResponse);
	}
	
}
